{"version":3,"file":"imageCompressor.js","sourceRoot":"","sources":["../src/imageCompressor.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectMetadata} from \"firebase-functions/lib/providers/storage\";\nimport * as  path from 'path';\nimport * as os from 'os';\nimport * as fse from 'fs-extra';\nimport * as admin from 'firebase-admin';\nimport * as Gm from 'gm';\nimport * as config from './config';\n\nconst gm = Gm.subClass({imageMagick: true});\n\nasync function compressPng(tempFilePath: string, optimizedFilePath: string) {\n    return new Promise((resolve, reject) => {\n        gm(tempFilePath)\n            .strip()\n            .resize(config.IMAGE_COMPRESSED_WIDTH, config.IMAGE_COMPRESSED_HEIGHT, '>')\n            .quality(5)\n            .interlace('Plane')\n            .colorspace('sRGB')\n            .write(optimizedFilePath, (err): void => {\n                if (err) reject(err);\n                else resolve()\n            })\n    })\n}\n\nfunction compressJpeg(tempFilePath: string, optimizedFilePath: string) {\n    return new Promise((resolve, reject) => {\n        gm(tempFilePath)\n            .strip()\n            .resize(config.IMAGE_COMPRESSED_WIDTH, config.IMAGE_COMPRESSED_HEIGHT, '>')\n            .quality(70)\n            .interlace('Plane')\n            .colorspace('sRGB')\n            .write(optimizedFilePath, (err): void => {\n                if (err) reject(err);\n                else resolve()\n            })\n    })\n}\n\n/**\n * When an image is uploaded in the Storage bucket We compress it\n */\nexport async function compress(object: ObjectMetadata) {\n    const fileBucket = object.bucket; // The Storage bucket that contains the file.\n    const filePath = object.name; // File path in the bucket.\n    const contentType = object.contentType; // File content type.\n    const metageneration = +object.metageneration;\n    const fileName = path.basename(filePath); // Get the file name.\n    // Exit if this is triggered on a file that is not an image.\n    if (!contentType.startsWith('image/')) {\n        console.log(`This is not an image ${fileName}`);\n        return null;\n    }\n    // Exit if file exists but is not new and is only being triggered because of a metadata change.\n    if (metageneration > 1) {\n        console.log('This is a metadata change event.');\n        return;\n    }\n\n    // Download file from bucket.\n    const bucket = admin.storage().bucket(fileBucket);\n    const file = bucket.file(filePath);\n    const [fileMetadata] = await file.getMetadata();\n    if (fileMetadata.metadata && fileMetadata.metadata.optimized) {\n        console.log(`This file ${fileName} is already optimized`);\n        return;\n    }\n    const tempFilePath = path.join(os.tmpdir(), fileName);\n    const optimizedFilePath = path.join(os.tmpdir(), fileName + '-optimized');\n    await file.download({destination: tempFilePath, validation: false});\n    // Generate a thumbnail using ImageMagick.\n    switch (contentType) {\n        case 'image/png':\n            await compressPng(tempFilePath, optimizedFilePath);\n            break;\n        default:\n            await compressJpeg(tempFilePath, optimizedFilePath);\n            break;\n    }\n    // Uploading the thumbnail.\n    await bucket.upload(optimizedFilePath, {\n        destination: filePath,\n        metadata: {\n            metadata: {optimized: true},\n            contentType: contentType,\n        },\n    });\n    console.log('Image uploaded to', filePath);\n    // Once the thumbnail has been uploaded delete the local file to free up disk space.\n    await Promise.all([fse.unlink(tempFilePath), fse.unlink(optimizedFilePath)])\n}\n\n"]}